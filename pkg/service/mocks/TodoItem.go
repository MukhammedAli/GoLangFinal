// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	testing "testing"

	todo "github.com/MukhammedAli/GoFinalProject"
)

// TodoItem is an autogenerated mock type for the TodoItem type
type TodoItem struct {
	mock.Mock
}

// Create provides a mock function with given fields: userId, listId, item
func (_m *TodoItem) Create(userId int, listId int, item todo.TodoItem) (int, error) {
	ret := _m.Called(userId, listId, item)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int, todo.TodoItem) int); ok {
		r0 = rf(userId, listId, item)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, todo.TodoItem) error); ok {
		r1 = rf(userId, listId, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: userId, itemId
func (_m *TodoItem) Delete(userId int, itemId int) error {
	ret := _m.Called(userId, itemId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, itemId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: userId, listId
func (_m *TodoItem) GetAll(userId int, listId int) ([]todo.TodoItem, error) {
	ret := _m.Called(userId, listId)

	var r0 []todo.TodoItem
	if rf, ok := ret.Get(0).(func(int, int) []todo.TodoItem); ok {
		r0 = rf(userId, listId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]todo.TodoItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userId, listId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: userId, itemId
func (_m *TodoItem) GetById(userId int, itemId int) (todo.TodoItem, error) {
	ret := _m.Called(userId, itemId)

	var r0 todo.TodoItem
	if rf, ok := ret.Get(0).(func(int, int) todo.TodoItem); ok {
		r0 = rf(userId, itemId)
	} else {
		r0 = ret.Get(0).(todo.TodoItem)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userId, itemId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userId, itemId, input
func (_m *TodoItem) Update(userId int, itemId int, input todo.UpdateItemInput) error {
	ret := _m.Called(userId, itemId, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, todo.UpdateItemInput) error); ok {
		r0 = rf(userId, itemId, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTodoItem creates a new instance of TodoItem. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewTodoItem(t testing.TB) *TodoItem {
	mock := &TodoItem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

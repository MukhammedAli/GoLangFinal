// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	testing "testing"

	todo "github.com/MukhammedAli/GoFinalProject"
)

// TodoList is an autogenerated mock type for the TodoList type
type TodoList struct {
	mock.Mock
}

// Create provides a mock function with given fields: userId, list
func (_m *TodoList) Create(userId int, list todo.TodoList) (int, error) {
	ret := _m.Called(userId, list)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, todo.TodoList) int); ok {
		r0 = rf(userId, list)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, todo.TodoList) error); ok {
		r1 = rf(userId, list)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: userId, listId
func (_m *TodoList) Delete(userId int, listId int) error {
	ret := _m.Called(userId, listId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, listId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: userId
func (_m *TodoList) GetAll(userId int) ([]todo.TodoList, error) {
	ret := _m.Called(userId)

	var r0 []todo.TodoList
	if rf, ok := ret.Get(0).(func(int) []todo.TodoList); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]todo.TodoList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: userId, listId
func (_m *TodoList) GetById(userId int, listId int) (todo.TodoList, error) {
	ret := _m.Called(userId, listId)

	var r0 todo.TodoList
	if rf, ok := ret.Get(0).(func(int, int) todo.TodoList); ok {
		r0 = rf(userId, listId)
	} else {
		r0 = ret.Get(0).(todo.TodoList)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userId, listId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userId, listId, input
func (_m *TodoList) Update(userId int, listId int, input todo.UpdateListInput) error {
	ret := _m.Called(userId, listId, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, todo.UpdateListInput) error); ok {
		r0 = rf(userId, listId, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTodoList creates a new instance of TodoList. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewTodoList(t testing.TB) *TodoList {
	mock := &TodoList{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
